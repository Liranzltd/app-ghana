<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

$a = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);

$b = ${($_ = isset($this->services['app.post.save']) ? $this->services['app.post.save'] : ($this->services['app.post.save'] = new \AppBundle\EventListener\PostSave($this))) && false ?: '_'};

$a->addEventSubscriber(${($_ = isset($this->services['sonata.easy_extends.doctrine.mapper']) ? $this->services['sonata.easy_extends.doctrine.mapper'] : $this->load('getSonata_EasyExtends_Doctrine_MapperService.php')) && false ?: '_'});
$a->addEventSubscriber(new \FOS\UserBundle\Doctrine\UserListener(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->load('getFosUser_Util_PasswordUpdaterService.php')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->load('getFosUser_Util_CanonicalFieldsUpdaterService.php')) && false ?: '_'}));
$a->addEventListener([0 => 'postPersist'], $b);
$a->addEventListener([0 => 'postUpdate'], $b);
$a->addEventListener([0 => 'preUpdate'], $b);
$a->addEventListener([0 => 'preRemove'], $b);
$a->addEventListener([0 => 'postGenerateSchema'], 'security.acl.dbal.schema_listener');
$a->addEventListener([0 => 'loadClassMetadata'], ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : ($this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener())) && false ?: '_'});

return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->load('getDoctrine_Dbal_ConnectionFactoryService.php')) && false ?: '_'}->createConnection(['driver' => 'pdo_mysql', 'host' => 'localhost', 'port' => 3306, 'dbname' => 'appghana', 'user' => 'dickson', 'password' => 'xFTA3Rs697wCf47M', 'charset' => 'UTF8', 'driverOptions' => [], 'serverVersion' => '5.7', 'defaultTableOptions' => []], new \Doctrine\DBAL\Configuration(), $a, []);
